import random  # Used for shuffling and random selection

# Validates if the code is a 4-digit number with all unique digits
def is_valid_code(code):
    return code.isdigit() and len(code) == 4 and len(set(code)) == 4

# Calculates number of bulls (correct digit & position) and cows (correct digit, wrong position)
def get_bulls_cows(secret, guess):
    bulls = sum(secret[i] == guess[i] for i in range(4))  # Matching digits in the correct position
    cows = sum(1 for d in guess if d in secret) - bulls   # Matching digits but not in the correct position
    return bulls, cows

# Generates a random 4-digit code with unique digits
def generate_random_code():
    digits = list("0123456789")      # List of digits 0–9
    random.shuffle(digits)           # Shuffle to randomize order
    return ''.join(digits[:4])       # Return the first 4 unique digits as the code

# Handles the logic for human player trying to guess the secret code
def human_guesses(secret):
    attempts = 0
    while True:
        guess = input("Enter your 4-digit guess: ")
        if not is_valid_code(guess):  # Validate input
            print("Invalid input. Must be 4 unique digits.")
            continue
        attempts += 1
        bulls, cows = get_bulls_cows(secret, guess)  # Get feedback
        print(f"Bulls: {bulls}, Cows: {cows}")
        if bulls == 4:  # Check for correct guess
            print(f"You cracked the code in {attempts} tries!")
            break

# Handles the logic for the AI trying to guess the human's secret code
def ai_guesses(secret):
    # Generates all possible 4-digit codes with unique digits
    def all_possibilities():
        lst = []
        for a in '0123456789':
            for b in '0123456789':
                for c in '0123456789':
                    for d in '0123456789':
                        guess = a + b + c + d
                        if len(set(guess)) == 4:  # Ensure uniqueness
                            lst.append(guess)
        return lst

    possibilities = all_possibilities()  # Initial pool of guesses
    attempts = 0

    while possibilities:
        guess = random.choice(possibilities)  # Randomly select a guess from possible codes
        attempts += 1
        bulls, cows = get_bulls_cows(secret, guess)  # Feedback from secret
        print(f"AI guess #{attempts}: {guess} → Bulls: {bulls}, Cows: {cows}")
        if bulls == 4:  # AI guessed the code correctly
            print(f"\nAI cracked the code '{secret}' in {attempts} tries.")
            break
        # Filter the list of possibilities based on the result
        new_poss = []
        for p in possibilities:
            b, c = get_bulls_cows(p, guess)
            if b == bulls and c == cows:
                new_poss.append(p)
        possibilities = new_poss  # Narrow down the list

# Game mode where one player sets the code, the other guesses
def mode_player_vs_player():
    code = input("Player 1, enter a 4-digit secret code (will be hidden): ")
    while not is_valid_code(code):  # Validate the code
        print("Invalid code. Must be 4 unique digits.")
        code = input("Enter again: ")
    for _ in range(50):  # Rudimentary way to clear the screen
        print()
    print("Player 2, start guessing!")
    human_guesses(code)  # Start the guessing phase

# Game mode where the player tries to guess a code generated by the AI
def mode_player_vs_ai():
    code = generate_random_code()  # AI generates a secret code
    print("AI has chosen a 4-digit secret code.")
    human_guesses(code)  # Player starts guessing

# Game mode where the AI tries to guess the code set by the player
def mode_ai_vs_player():
    code = input("Enter a 4-digit code for AI to guess (will be hidden): ")
    while not is_valid_code(code):  # Validate the code
        print("Invalid code. Must be 4 unique digits.")
        code = input("Enter again: ")
    for _ in range(50):  # Screen clear
        print()
    ai_guesses(code)  # AI starts guessing

# Main menu that lets the user choose a game mode
def main():
    while True:
        print("\n=== COWS AND BULLS ===")
        print("1. Player vs Player")
        print("2. You guess AI's secret")
        print("3. AI guesses your secret")
        print("4. Exit")
        mode = input("Choose a mode (1-4): ")
        if mode == '1':
            mode_player_vs_player()
        elif mode == '2':
            mode_player_vs_ai()
        elif mode == '3':
            mode_ai_vs_player()
        elif mode == '4':
            print("Exiting. Thanks for playing!")
            break
        else:
            print("Invalid choice.")  # Handle invalid input

main()  # Start the game
